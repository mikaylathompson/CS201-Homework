#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.3.6 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 30 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 56 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Monospace\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1 0 1
#"\0"
0 75 10 #"Monospace\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1           0 3075 0 17 3 66
#"; ****************************************************************"
0 0 23 29 1 #"\n"
0 0 17 3 54 #"; CS 201a HW #3  DUE by Wednesday, October 2, 11:59 pm"
0 0 23 29 1 #"\n"
0 0 17 3 38 #"; using the submit command on the Zoo."
0 0 23 29 1 #"\n"
0 0 17 3 66
#"; ****************************************************************"
0 0 23 29 1 #"\n"
0 0 17 3 24 #"; Name: Mikayla Thompson"
0 0 23 29 1 #"\n"
0 0 17 3 42 #"; Email address: mikayla.thompson@yale.edu"
0 0 23 29 1 #"\n"
0 0 17 3 66
#"; ****************************************************************"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 41 #"; Unless the problem specifies otherwise:"
0 0 23 29 1 #"\n"
0 0 17 3 53 #"; (a) You may solve the problem using any method and "
0 0 23 29 1 #"\n"
0 0 17 3 67
#"; any Scheme constructs *except* mutators (set! and its relatives.)"
0 0 23 29 1 #"\n"
0 0 17 3 57 #"; (b) You may write auxiliary procedure(s) in addition to"
0 0 23 29 1 #"\n"
0 0 17 3 54 #"; the one(s) specified in the problem.  Please include"
0 0 23 29 1 #"\n"
0 0 17 3 58
#"; a comment for each one specifying what its arguments are"
0 0 23 29 1 #"\n"
0 0 17 3 59
#"; and what result it returns; also, explain how it does it,"
0 0 23 29 1 #"\n"
0 0 17 3 23 #"; if it is not obvious."
0 0 23 29 1 #"\n"
0 0 17 3 62
#"; (c) Please make your code as clear and readable as possible."
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 36 #"; The topics of this assignment are:"
0 0 23 29 1 #"\n"
0 0 17 3 37 #"; a simulator for Turing machines and"
0 0 23 29 1 #"\n"
0 0 17 3 34 #"; writing Turing machine programs."
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 66
#"; ****************************************************************"
0 0 23 29 1 #"\n"
0 0 17 3 32 #"; ** problem 0 ** (1 easy point)"
0 0 23 29 1 #"\n"
0 0 17 3 58
#"; Modify the following definition to reflect the number of"
0 0 23 29 1 #"\n"
0 0 17 3 37 #"; hours you spent on this assignment."
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 5 #"hours"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 66
#"; ****************************************************************"
0 0 23 29 1 #"\n"
0 0 17 3 49 #"; Turing machines were described in the lectures;"
0 0 23 29 1 #"\n"
0 0 17 3 52 #"; see also the lecture notes on the course web page."
0 0 23 29 1 #"\n"
0 0 17 3 60
#"; Here is a top-level procedure to simulate a Turing machine"
0 0 23 29 1 #"\n"
0 0 17 3 50 #"; starting from a given configuration until either"
0 0 23 29 1 #"\n"
0 0 17 3 38 #"; it halts or it has executed n steps."
0 0 23 29 1 #"\n"
0 0 17 3 66
#"; The procedure returns the list of the successive configurations,"
0 0 23 29 1 #"\n"
0 0 17 3 32 #"; starting with the initial one."
0 0 23 29 1 #"\n"
0 0 17 3 60
#"; The length of the list of configurations is one more than "
0 0 23 29 1 #"\n"
0 0 17 3 43 #"; the number of steps taken by the machine."
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 8 #"simulate"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"mach"
0 0 23 3 1 #" "
0 0 14 3 6 #"config"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 14 3 2 #"<="
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 6 #"config"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 14 3 7 #"halted?"
0 0 23 3 1 #" "
0 0 14 3 4 #"mach"
0 0 23 3 1 #" "
0 0 14 3 6 #"config"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 6 #"config"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 23 3 1 #"("
0 0 14 3 4 #"else"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 23 3 1 #"("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 14 3 6 #"config"
0 0 23 29 1 #"\n"
0 1 23 65 1 #"\t"
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 8 #"simulate"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 1 23 65 1 #"\t"
0 0 23 3 5 #"     "
0 0 14 3 4 #"mach"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"next-config"
0 0 23 3 1 #" "
0 0 14 3 4 #"mach"
0 0 23 3 1 #" "
0 0 14 3 6 #"config"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 46 #"; mach is a representation of a Turing machine"
0 0 23 29 1 #"\n"
0 0 17 3 62
#"; config is a representation of a configuration of the machine"
0 0 23 29 1 #"\n"
0 0 17 3 46 #"; n is the maximum number of steps to simulate"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 48 #"; The procedures halted? and next-config will be"
0 0 23 29 1 #"\n"
0 0 17 3 48 #"; developed in the problems below; you will then"
0 0 23 29 1 #"\n"
0 0 17 3 43 #"; have a complete Turing machine simulator."
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 66
#"; ****************************************************************"
0 0 23 29 1 #"\n"
0 0 17 3 61
#"; A Turing machine is represented as a list of instructions, "
0 0 23 29 1 #"\n"
0 0 17 3 62
#"; where each instruction is a 5-tuple, represented as a list: "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 74
(
 #"; current state, current symbol, new state, new symbol, and move dir"
 #"ection"
) 0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 53 #"; The current state and new state are Scheme symbols,"
0 0 23 29 1 #"\n"
0 0 17 3 59
#"; the current symbol and new symbol are symbols or numbers,"
0 0 23 29 1 #"\n"
0 0 17 3 69
(
 #"; and the move direction must be either the symbol l or the symbol r"
 #"."
) 0 0 23 29 1 #"\n"
0 0 17 3 61
#"; (NB: L and l are the same symbols in R5RS, as are R and r.)"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 24 #"; Example: (q1 0 q3 1 l)"
0 0 23 29 1 #"\n"
0 0 17 3 19 #"; is an instruction"
0 0 23 29 1 #"\n"
0 0 17 3 42 #"; with current state q1, current symbol 0,"
0 0 23 29 1 #"\n"
0 0 17 3 51 #"; new state q3, new symbol 1, and move direction l."
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 53 #"; Here are selectors for the parts of an instruction:"
0 0 23 29 1 #"\n"
0 0 17 3 54 #"; Please use them in your code when you refer to parts"
0 0 23 29 1 #"\n"
0 0 17 3 60
#"; of Turing machine instructions  -- they will be a lot more"
0 0 23 29 1 #"\n"
0 0 17 3 53 #"; mnemonic than the corresponding list-refs or caddrs"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 7 #"i-state"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"inst"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"list-ref"
0 0 23 3 1 #" "
0 0 14 3 4 #"inst"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 8 #"i-symbol"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"inst"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"list-ref"
0 0 23 3 1 #" "
0 0 14 3 4 #"inst"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 11 #"i-new-state"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"inst"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"list-ref"
0 0 23 3 1 #" "
0 0 14 3 4 #"inst"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 12 #"i-new-symbol"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"inst"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"list-ref"
0 0 23 3 1 #" "
0 0 14 3 4 #"inst"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 11 #"i-direction"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"inst"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"list-ref"
0 0 23 3 1 #" "
0 0 14 3 4 #"inst"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 52 #"; A Turing machine is simply a list of instructions."
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 57 #"; Example: a Turing machine that when started in state q1"
0 0 23 29 1 #"\n"
0 0 17 3 45 #"; on the leftmost of a string of 0's and 1's "
0 0 23 29 1 #"\n"
0 0 17 3 54 #"; changes all the 0's to 1's and ; all the 1's to 0's "
0 0 23 29 1 #"\n"
0 0 17 3 61
#"; and then returns the head to the leftmost symbol and halts."
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 3 #"tm1"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 29 1 #"\n"
0 1 23 65 1 #"\t"
0 0 23 3 5 #"     "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"q1"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 14 3 2 #"q1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 1 23 65 1 #"\t"
0 0 23 3 5 #"     "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"q1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 2 #"q1"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 1 23 65 1 #"\t"
0 0 23 3 5 #"     "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"q1"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 14 3 2 #"q2"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 1 23 65 1 #"\t"
0 0 23 3 5 #"     "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"q2"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 14 3 2 #"q2"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 1 23 65 1 #"\t"
0 0 23 3 5 #"     "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"q2"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 2 #"q2"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 1 23 65 1 #"\t"
0 0 23 3 5 #"     "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"q2"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 14 3 2 #"q3"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 1 #")"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 66
#"; ****************************************************************"
0 0 23 29 1 #"\n"
0 0 17 3 26 #"; ** problem 1 (15 points)"
0 0 23 29 1 #"\n"
0 0 17 3 35 #"; Define (in the format just given)"
0 0 23 29 1 #"\n"
0 0 17 3 24 #"; a Turing machine named"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 11 #"; tm-mirror"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 29 #"; that takes an input string;"
0 0 23 29 1 #"\n"
0 0 17 3 37 #"; and produces an output string equal"
0 0 23 29 1 #"\n"
0 0 17 3 36 #"; to the reverse of the input string"
0 0 23 29 1 #"\n"
0 0 17 3 37 #"; concatenated with the input string."
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 35 #"; That is, when started in state q1"
0 0 23 29 1 #"\n"
0 0 17 3 36 #"; with the head on the leftmost of a"
0 0 23 29 1 #"\n"
0 0 17 3 33 #"; string of 0's and 1's, it halts"
0 0 23 29 1 #"\n"
0 0 17 3 36 #"; with the head on the leftmost of a"
0 0 23 29 1 #"\n"
0 0 17 3 32 #"; string of 0's and 1's, and the"
0 0 23 29 1 #"\n"
0 0 17 3 32 #"; output string is obtained from"
0 0 23 29 1 #"\n"
0 0 17 3 34 #"; the input string by reversing it"
0 0 23 29 1 #"\n"
0 0 17 3 35 #"; and concatenating it with itself."
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 48 #"; Your machine *may* use additional tape symbols"
0 0 23 29 1 #"\n"
0 0 17 3 34 #"; but the output should contain no"
0 0 23 29 1 #"\n"
0 0 17 3 36 #"; symbols other than 0, 1 and blank."
0 0 23 29 1 #"\n"
0 0 17 3 33 #"; When the machine halts, symbols"
0 0 23 29 1 #"\n"
0 0 17 3 40 #"; other than the output should be blank."
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 30 #"; For example, the behavior of"
0 0 23 29 1 #"\n"
0 0 17 3 24 #"; the machine should be:"
0 0 23 29 1 #"\n"
0 0 17 3 19 #"; input  =>  output"
0 0 23 29 1 #"\n"
0 0 17 3 19 #"; 110    =>  011110"
0 0 23 29 1 #"\n"
0 0 17 3 25 #"; 101011 =>  110101101011"
0 0 23 29 1 #"\n"
0 0 17 3 15 #"; 1      =>  11"
0 0 23 29 1 #"\n"
0 0 17 3 21 #"; 0001   =>  10000001"
0 0 23 29 1 #"\n"
0 0 17 3 30 #"; empty string => empty string"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 39 #"; (It may help to review ideas from the"
0 0 23 29 1 #"\n"
0 0 17 3 38 #"; machine to make a copy of its input,"
0 0 23 29 1 #"\n"
0 0 17 3 35 #"; described in lectures and in the "
0 0 23 29 1 #"\n"
0 0 17 3 24 #"; online lecture notes.)"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 42 #"; The initial state of your machine should"
0 0 23 29 1 #"\n"
0 0 17 3 41 #"; be q1 -- other states may be named with"
0 0 23 29 1 #"\n"
0 0 17 3 32 #"; Scheme symbols of your choice."
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 39 #"; IMPORTANT: please include an overview"
0 0 23 29 1 #"\n"
0 0 17 3 47 #"; description of how your Turing machine works."
0 0 23 29 1 #"\n"
0 0 17 3 49 #"; Note that you'll be able to run it once you get"
0 0 23 29 1 #"\n"
0 0 17 3 43 #"; the procedures for the simulator working."
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 66
#"; ****************************************************************"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 71
(
 #";  | |0|1|0|1| | | | | |    q1--go to end of row(don't change anythi"
 #"ng)"
) 0 0 23 29 1 #"\n"
0 0 17 3 7 #";     ^"
0 0 23 29 1 #"\n"
0 0 17 3 88
(
 #";  | |0|1|0|1| | | | | |    q2--go backwards to nearest number. To q"
 #"3 if one, q4 if zero"
) 0 0 23 29 1 #"\n"
0 0 17 3 15 #";             ^"
0 0 23 29 1 #"\n"
0 0 17 3 103
(
 #";  | |0|1|0|y| | | | | |    q3--change this number to y(one) then fo"
 #"rward until a blank, add a 1, to q5"
) 0 0 23 29 1 #"\n"
0 0 17 3 13 #";           ^"
0 0 23 29 1 #"\n"
0 0 17 3 83
(
 #";  | |0|1|0|y|1| | | | |    q5--go backwards until a y or z, then on"
 #"e more.  To q2."
) 0 0 23 29 1 #"\n"
0 0 17 3 15 #";             ^"
0 0 23 29 1 #"\n"
0 0 17 3 88
(
 #";  | |0|1|0|y|1| | | | |    q2--go backwards to nearest number. To q"
 #"3 if one, q4 if zero"
) 0 0 23 29 1 #"\n"
0 0 17 3 13 #";           ^"
0 0 23 29 1 #"\n"
0 0 17 3 89
(
 #";  | |0|1|z|y|1| | | | |    q4--change to a z, then forward until a "
 #"blank, add a 0, to q5"
) 0 0 23 29 1 #"\n"
0 0 17 3 11 #";         ^"
0 0 23 29 1 #"\n"
0 0 17 3 90
(
 #";  | |0|1|z|y|1|0| | | |    repeat with q5-->q2-->q3/q4-->q5 until q"
 #"5 hits a blank.  to q6"
) 0 0 23 29 1 #"\n"
0 0 17 3 17 #";               ^"
0 0 23 29 1 #"\n"
0 0 17 3 90
(
 #";  | |z|y|z|y|1|0|1|0| |    q6--replace every z with 0 and y with 1 "
 #"until it hits a number"
) 0 0 23 29 1 #"\n"
0 0 17 3 7 #";     ^"
0 0 23 29 1 #"\n"
0 0 17 3 61
#";  | |0|1|0|1|1|0|1|0| |    q7--return to beginning of string"
0 0 23 29 1 #"\n"
0 0 17 3 15 #";             ^"
0 0 23 29 1 #"\n"
0 0 17 3 24 #";  | |0|1|0|1|1|0|1|0| |"
0 0 23 29 1 #"\n"
0 0 17 3 7 #";     ^"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 9 #"tm-mirror"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"list"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"q1"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 14 3 2 #"q1"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"q1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 2 #"q1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 17 3 32 #";  Goes forward to end of string"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"q1"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 14 3 2 #"q2"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"q2"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 14 3 2 #"q2"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"q2"
0 0 23 3 1 #" "
0 0 14 3 1 #"z"
0 0 23 3 1 #" "
0 0 14 3 2 #"q2"
0 0 23 3 1 #" "
0 0 14 3 1 #"z"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"q2"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 2 #"q3"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 17 3 25 #";  Goes left until 0 or 1"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"q2"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 14 3 2 #"q4"
0 0 23 3 1 #" "
0 0 14 3 1 #"z"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"q2"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 14 3 2 #"q6"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"q3"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 2 #"q3"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"q3"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 14 3 2 #"q3"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 17 3 25 #";  Saves and deposits a 1"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"q3"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 14 3 2 #"q3"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"q3"
0 0 23 3 1 #" "
0 0 14 3 1 #"z"
0 0 23 3 1 #" "
0 0 14 3 2 #"q3"
0 0 23 3 1 #" "
0 0 14 3 1 #"z"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"q3"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 14 3 2 #"q5"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"q4"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 2 #"q4"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"q4"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 14 3 2 #"q4"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 17 3 25 #";  Saves and deposits a 0"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"q4"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 14 3 2 #"q4"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"q4"
0 0 23 3 1 #" "
0 0 14 3 1 #"z"
0 0 23 3 1 #" "
0 0 14 3 2 #"q4"
0 0 23 3 1 #" "
0 0 14 3 1 #"z"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"q4"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 14 3 2 #"q5"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"q5"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 2 #"q5"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"q5"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 14 3 2 #"q5"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"q5"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 14 3 2 #"q2"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 17 3 27 #";  Go left until y, z, or b"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"q5"
0 0 23 3 1 #" "
0 0 14 3 1 #"z"
0 0 23 3 1 #" "
0 0 14 3 2 #"q2"
0 0 23 3 1 #" "
0 0 14 3 1 #"z"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"q5"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 14 3 2 #"q6"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"q6"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 14 3 2 #"q6"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"q6"
0 0 23 3 1 #" "
0 0 14 3 1 #"z"
0 0 23 3 1 #" "
0 0 14 3 2 #"q6"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 17 3 22 #";  Replace y's and z's"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"q6"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 14 3 2 #"q7"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"q6"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 2 #"q7"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"q7"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 14 3 2 #"q7"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"q7"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 2 #"q7"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 17 3 34 #";  Goes left until a blank.  Ends."
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                   "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 66
#"; ****************************************************************"
0 0 23 29 1 #"\n"
0 0 17 3 25 #"; ** problem 2 (9 points)"
0 0 23 29 1 #"\n"
0 0 17 3 37 #"; Write the following two procedures."
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 53 #"; Please use the instruction selectors defined above:"
0 0 23 29 1 #"\n"
0 0 17 3 59
#"; i-state, i-symbol, i-new-state, i-new-symbol, i-direction"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 30 #"; (i-match? state symbol inst)"
0 0 23 29 1 #"\n"
0 0 17 3 46 #"; returns #t if state and symbol are equal to "
0 0 23 29 1 #"\n"
0 0 17 3 42 #"; the state and symbol of instruction inst"
0 0 23 29 1 #"\n"
0 0 17 3 22 #"; otherwise returns #f"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 30 #"; (i-lookup state symbol mach)"
0 0 23 29 1 #"\n"
0 0 17 3 54 #"; returns #f if no instruction of Turing machine mach "
0 0 23 29 1 #"\n"
0 0 17 3 48 #"; has state and symbol equal to state and symbol"
0 0 23 29 1 #"\n"
0 0 17 3 57 #"; otherwise returns the instruction in mach that matches."
0 0 23 29 1 #"\n"
0 0 17 3 57 #"; You may assume that at most one instruction will match."
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 11 #"; Examples:"
0 0 23 29 1 #"\n"
0 0 17 3 40 #"; (i-match? 'q1 'b '(q1 b q3 b l)) => #t"
0 0 23 29 1 #"\n"
0 0 17 3 40 #"; (i-match? 'q1  0 '(q1 1 q4 1 l)) => #f"
0 0 23 29 1 #"\n"
0 0 17 3 39 #"; (i-match? 'q2 1 '(q2 1 q2 1 l)) => #t"
0 0 23 29 1 #"\n"
0 0 17 3 39 #"; (i-lookup 'q1 1 tm1) => (q1 1 q1 0 r)"
0 0 23 29 1 #"\n"
0 0 17 3 40 #"; (i-lookup 'q2 'b tm1) => (q2 b q3 b r)"
0 0 23 29 1 #"\n"
0 0 17 3 28 #"; (i-lookup 'q3 1 tm1) => #f"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 66
#"; ****************************************************************"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 8 #"i-match?"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"state"
0 0 23 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 23 3 1 #" "
0 0 14 3 4 #"inst"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 3 #"and"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"i-state"
0 0 23 3 1 #" "
0 0 14 3 4 #"inst"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 23 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 23 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"i-symbol"
0 0 23 3 1 #" "
0 0 14 3 4 #"inst"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 8 #"i-lookup"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"state"
0 0 23 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 23 3 1 #" "
0 0 14 3 7 #"machine"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 14 3 5 #"null?"
0 0 23 3 1 #" "
0 0 14 3 7 #"machine"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 2 #"#f"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 14 3 8 #"i-match?"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 7 #"machine"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 7 #"machine"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 23 3 1 #"("
0 0 14 3 4 #"else"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"i-lookup"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 7 #"machine"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 66
#"; ****************************************************************"
0 0 23 29 1 #"\n"
0 0 17 3 44 #"; A Turing machine configuration is a list, "
0 0 23 29 1 #"\n"
0 0 17 3 47 #"; each element of which is a symbol, a number, "
0 0 23 29 1 #"\n"
0 0 17 3 36 #"; or a list containing one symbol.  "
0 0 23 29 1 #"\n"
0 0 17 3 42 #"; There must be exactly *one* element that"
0 0 23 29 1 #"\n"
0 0 17 3 37 #"; consists of a list with one symbol."
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 58
#"; For example, we define the following two configurations:"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 7 #"config1"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 2 #"q3"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 7 #"config2"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 2 #"q6"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 53 #"; config1 represents the Turing machine configuration"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 29 #";   -------------------------"
0 0 23 29 1 #"\n"
0 0 17 3 29 #";   .. |  | 0 | 1 | 1 |  | .."
0 0 23 29 1 #"\n"
0 0 17 3 29 #";   -------------------------"
0 0 23 29 1 #"\n"
0 0 17 3 17 #";               ^"
0 0 23 29 1 #"\n"
0 0 17 3 18 #";               q3"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 53 #"; in which the non-blank symbols on the tape are 011,"
0 0 23 29 1 #"\n"
0 0 17 3 57 #"; and the machine is in state q3 with the read/write head"
0 0 23 29 1 #"\n"
0 0 17 3 26 #"; scanning the leftmost 1."
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 53 #"; config2 represents the Turing machine configuration"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 34 #";   ------------------------------"
0 0 23 29 1 #"\n"
0 0 17 3 34 #";   .. |   | 1 |  | 0 |   |   | .."
0 0 23 29 1 #"\n"
0 0 17 3 34 #";   ------------------------------"
0 0 23 29 1 #"\n"
0 0 17 3 21 #";                   ^"
0 0 23 29 1 #"\n"
0 0 17 3 22 #";                   q6"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 63
#"; in which the symbols 1, blank, 0, are on the tape, surrounded"
0 0 23 29 1 #"\n"
0 0 17 3 63
#"; by blanks, and the machine is in state q6 with the read/write"
0 0 23 29 1 #"\n"
0 0 17 3 22 #"; head scanning the 0."
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 59
#"; The single element that is a list gives the current state"
0 0 23 29 1 #"\n"
0 0 17 3 58
#"; of the machine, and is placed immediately to the left of"
0 0 23 29 1 #"\n"
0 0 17 3 44 #"; the symbol scanned by the read/write head."
0 0 23 29 1 #"\n"
0 0 17 3 50 #"; We use the symbol b for the tape symbol blank.  "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 62
#"; A configuration is *normalized* if neither its first nor its"
0 0 23 29 1 #"\n"
0 0 17 3 64
#"; last symbol is the symbol b.  Of the two configurations above,"
0 0 23 29 1 #"\n"
0 0 17 3 68
#"; config1 is normalized, but config2 is not (its last element is b)."
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 55 #"; Note that tape squares not explicitly represented are"
0 0 23 29 1 #"\n"
0 0 17 3 56 #"; assumed to contain blanks.  A normalized configuration"
0 0 23 29 1 #"\n"
0 0 17 3 60
#"; to represent the machine in state q1 with all tape squares"
0 0 23 29 1 #"\n"
0 0 17 3 23 #"; blank is thus ((q1))."
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 66
#"; ****************************************************************"
0 0 23 29 1 #"\n"
0 0 17 3 26 #"; ** problem 3 (15 points)"
0 0 23 29 1 #"\n"
0 0 17 3 39 #"; Write the following three procedures."
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 20 #"; (normalize config)"
0 0 23 29 1 #"\n"
0 0 17 3 34 #"; takes a configuration config and"
0 0 23 29 1 #"\n"
0 0 17 3 51 #"; returns an equivalent *normalized* configuration."
0 0 23 29 1 #"\n"
0 0 17 3 51 #"; That is, the same Turing machine configuration is"
0 0 23 29 1 #"\n"
0 0 17 3 48 #"; represented by the input configuration and the"
0 0 23 29 1 #"\n"
0 0 17 3 52 #"; output configuration, and the output configuration"
0 0 23 29 1 #"\n"
0 0 17 3 49 #"; does not have a b as its first or last element."
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 33 #"; (change-state new-state config)"
0 0 23 29 1 #"\n"
0 0 17 3 45 #"; takes a normalized configuration config and"
0 0 23 29 1 #"\n"
0 0 17 3 36 #"; returns a normalized configuration"
0 0 23 29 1 #"\n"
0 0 17 3 38 #"; in which the state of the machine is"
0 0 23 29 1 #"\n"
0 0 17 3 23 #"; changed to new-state."
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 34 #"; (write-symbol new-symbol config)"
0 0 23 29 1 #"\n"
0 0 17 3 45 #"; takes a normalized configuration config and"
0 0 23 29 1 #"\n"
0 0 17 3 36 #"; returns a normalized configuration"
0 0 23 29 1 #"\n"
0 0 17 3 52 #"; in which the symbol scanned by the read/write head"
0 0 23 29 1 #"\n"
0 0 17 3 34 #"; has been replaced by new-symbol."
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 11 #"; Examples:"
0 0 23 29 1 #"\n"
0 0 17 3 57 #"; (normalize '(b 0 (q3) b 1 1 0 b b)) => (0 (q3) b 1 1 0)"
0 0 23 29 1 #"\n"
0 0 17 3 43 #"; (normalize '(b b (q4) b b b b)) => ((q4))"
0 0 23 29 1 #"\n"
0 0 17 3 65
#"; (normalize '(b 0 b 0 (q33) 1 0 b 0 b)) => (0 b 0 (q33) 1 0 b 0)"
0 0 23 29 1 #"\n"
0 0 17 3 46 #"; (change-state 'q2 '(0 (q1) 1)) => (0 (q2) 1)"
0 0 23 29 1 #"\n"
0 0 17 3 52 #"; (change-state 'q13 '(0 1 1 (q4))) => (0 1 1 (q13))"
0 0 23 29 1 #"\n"
0 0 17 3 59
#"; (write-symbol '1 '(0 (q41) 0 1 1 0)) => (0 (q41) 1 1 1 0)"
0 0 23 29 1 #"\n"
0 0 17 3 61
#"; (write-symbol 'c '(0 0 1 (q2) 1 1 1)) => (0 0 1 (q2) c 1 1)"
0 0 23 29 1 #"\n"
0 0 17 3 43 #"; (write-symbol 'b '(1 (q3) 0)) => (1 (q3))"
0 0 23 29 1 #"\n"
0 0 17 3 66
#"; ****************************************************************"
0 0 23 29 1 #"\n"
0 0 17 3 88
(
 #";normalize: check if first (car config) is blank.  If so, send (cdr "
 #"config) to normalize"
) 0 0 23 29 1 #"\n"
0 0 17 3 92
(
 #";           check if the last (list-ref config (length config)) is b"
 #"lank.  If so, remove it."
) 0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 9 #"normalize"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"config"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 15 3 1 #"c"
0 0 15 3 3 #"ond"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 14 3 2 #"an"
0 0 14 3 1 #"d"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 6 #"config"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"b"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"            "
0 0 23 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"list-ref"
0 0 23 3 1 #" "
0 0 14 3 6 #"config"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"length"
0 0 23 3 1 #" "
0 0 14 3 6 #"config"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"b"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"       "
0 0 23 3 1 #"("
0 0 14 3 9 #"normalize"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"reverse"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"reverse"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 6 #"config"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 6 #"config"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"b"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 9 #"normalize"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 6 #"config"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"list-ref"
0 0 23 3 1 #" "
0 0 14 3 6 #"config"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"length"
0 0 23 3 1 #" "
0 0 14 3 6 #"config"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"b"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 9 #"normalize"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"reverse"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"reverse"
0 0 23 3 1 #" "
0 0 14 3 6 #"config"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 23 3 1 #"("
0 0 14 3 4 #"else"
0 0 23 3 1 #" "
0 0 14 3 6 #"config"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 12 #"change-state"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"state"
0 0 23 3 1 #" "
0 0 14 3 6 #"config"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"list?"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 6 #"config"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 23 3 1 #"("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 6 #"config"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 23 3 1 #"("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 6 #"config"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 12 #"change-state"
0 0 23 3 1 #" "
0 0 14 3 5 #"state"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 6 #"config"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 15 #"; write-symbol:"
0 0 23 29 1 #"\n"
0 0 17 3 28 #";              find the head"
0 0 23 29 1 #"\n"
0 0 17 3 68
#";              change the next symbol to sym (or add sym to the end)"
0 0 23 29 1 #"\n"
0 0 17 3 26 #";              renormalize"
0 0 23 29 1 #"\n"
0 0 17 3 109
(
 #"; but I can't normalize during the main loop, because that might tak"
 #"e out blanks in the middle of the config."
) 0 0 23 29 1 #"\n"
0 0 17 3 117
(
 #"; so write-symbol-helper does the finding and changing, and write-sy"
 #"mbol itself just normalizes the output from there"
) 0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 12 #"write-symbol"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"sym"
0 0 23 3 1 #" "
0 0 14 3 6 #"config"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 9 #"normalize"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 19 #"write-symbol-helper"
0 0 23 3 1 #" "
0 0 14 3 3 #"sym"
0 0 23 3 1 #" "
0 0 14 3 6 #"config"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 19 #"write-symbol-helper"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"sym"
0 0 23 3 1 #" "
0 0 14 3 6 #"config"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"list?"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 6 #"config"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 3 #"   "
0 0 17 3 20 #"; If I'm on the head"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"null?"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 6 #"config"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 3 #"   "
0 0 17 3 9 #"; If the "
0 0 17 3 30 #"head is at the end of the tape"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"            "
0 0 23 3 1 #"("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 6 #"config"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 14 3 3 #"sym"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 2 #"  "
0 0 17 3 25 #"; add sym behind the head"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"            "
0 0 23 3 1 #"("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 14 3 5 #"onfig"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 14 3 3 #"sym"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 6 #"config"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 2 #"  "
0 0 17 3 23 #"; Changes symbol, adds "
0 0 17 3 15 #"to rest of list"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 23 3 1 #"("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 6 #"config"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 19 #"write-symbol-helper"
0 0 23 3 1 #" "
0 0 14 3 3 #"sym"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 6 #"config"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 2 #"  "
0 0 17 3 34 #"; Not on the head, so keep looking"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 66
#"; ****************************************************************"
0 0 23 29 1 #"\n"
0 0 17 3 29 #"; ** problem 4 ** (10 points)"
0 0 23 29 1 #"\n"
0 0 17 3 22 #"; Write two procedures"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 26 #"; (shift-head-left config)"
0 0 23 29 1 #"\n"
0 0 17 3 45 #"; takes a normalized configuration config and"
0 0 23 29 1 #"\n"
0 0 17 3 45 #"; returns a normalized configuration in which"
0 0 23 29 1 #"\n"
0 0 17 3 56 #"; the position of the read/write head has been moved one"
0 0 23 29 1 #"\n"
0 0 17 3 26 #"; tape square to the left."
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 27 #"; (shift-head-right config)"
0 0 23 29 1 #"\n"
0 0 17 3 45 #"; takes a normalized configuration config and"
0 0 23 29 1 #"\n"
0 0 17 3 45 #"; returns a normalized configuration in which"
0 0 23 29 1 #"\n"
0 0 17 3 56 #"; the position of the read/write head has been moved one"
0 0 23 29 1 #"\n"
0 0 17 3 27 #"; tape square to the right."
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 11 #"; Examples:"
0 0 23 29 1 #"\n"
0 0 17 3 37 #"; (shift-head-left '((q5))) => ((q5))"
0 0 23 29 1 #"\n"
0 0 17 3 57 #"; (shift-head-left '(0 0 (q6) 1 1 1)) => (0 (q6) 0 1 1 1)"
0 0 23 29 1 #"\n"
0 0 17 3 57 #"; (shift-head-left '((q12) 0 1 1 0)) => ((q12) b 0 1 1 0)"
0 0 23 29 1 #"\n"
0 0 17 3 38 #"; (shift-head-right '((q2))) => ((q2))"
0 0 23 29 1 #"\n"
0 0 17 3 54 #"; (shift-head-right '((q9) 0 1 1 1)) => (0 (q9) 1 1 1)"
0 0 23 29 1 #"\n"
0 0 17 3 56 #"; (shift-head-right '(1 0 1 1 (q8))) => (1 0 1 1 b (q8))"
0 0 23 29 1 #"\n"
0 0 17 3 66
#"; ****************************************************************"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 77
(
 #"; shift-head-left: find the spot before the head.  (list? (car (cdr "
 #"config)))"
) 0 0 23 29 1 #"\n"
0 0 17 3 87
(
 #";                  add it to the front of the list, removing it from"
 #" it's current spot."
) 0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 15 #"shift-head-left"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"config"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 14 3 5 #"list?"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 6 #"config"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 9 #"normalize"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 6 #"config"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 6 #"config"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 2 #"  "
0 0 17 3 30 #";Already on the head?  Add a b"
0 0 17 3 4 #"lank"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 14 3 5 #"list?"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 6 #"config"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 6 #"config"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 6 #"config"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 6 #"config"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 17 3 24 #";Next is the head?  Move"
0 0 17 3 2 #" i"
0 0 17 3 5 #"t up."
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 23 3 1 #"("
0 0 14 3 4 #"else"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 6 #"config"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 15 #"shift-head-left"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 6 #"config"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 17 3 5 #";Not "
0 0 17 3 31 #"to the head yet?  Keep looking."
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 16 #"shift-head-right"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"config"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 7 #"reverse"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 15 #"shift-head-left"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"reverse"
0 0 23 3 1 #" "
0 0 14 3 6 #"config"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 66
#"; ****************************************************************"
0 0 23 29 1 #"\n"
0 0 17 3 29 #"; ** problem 5 ** (15 points)"
0 0 23 29 1 #"\n"
0 0 17 3 39 #"; Write the following three procedures."
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 18 #"; (c-state config)"
0 0 23 29 1 #"\n"
0 0 17 3 50 #"; given a normalized configuration config, returns"
0 0 23 29 1 #"\n"
0 0 17 3 56 #"; the current state of the machine in the configuration."
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 19 #"; (c-symbol config)"
0 0 23 29 1 #"\n"
0 0 17 3 51 #"; given a normalized machine configuration, returns"
0 0 23 29 1 #"\n"
0 0 17 3 54 #"; the symbol currently scanned by the read/write head."
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 23 #"; (halted? mach config)"
0 0 23 29 1 #"\n"
0 0 17 3 58
#"; that returns #t if the Turing machine mach is halted in "
0 0 23 29 1 #"\n"
0 0 17 3 58
#"; machined configuration config (ie, no instruction of the"
0 0 23 29 1 #"\n"
0 0 17 3 49 #"; machine matches the current state and symbol in"
0 0 23 29 1 #"\n"
0 0 17 3 34 #"; configuration) and #f otherwise."
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 11 #"; Examples:"
0 0 23 29 1 #"\n"
0 0 17 3 33 #"; (c-state '(0 0 (q6) 1 1)) => q6"
0 0 23 29 1 #"\n"
0 0 17 3 25 #"; (c-state '((q4))) => q4"
0 0 23 29 1 #"\n"
0 0 17 3 33 #"; (c-symbol '(0 0 (q6) 1 1)) => 1"
0 0 23 29 1 #"\n"
0 0 17 3 25 #"; (c-symbol '((q4))) => b"
0 0 23 29 1 #"\n"
0 0 17 3 35 #"; (halted? tm1 '(1 1 0 (q1))) => #f"
0 0 23 29 1 #"\n"
0 0 17 3 42 #"; (halted? '((q1 b q2 b r)) '((q2))) => #t"
0 0 23 29 1 #"\n"
0 0 17 3 66
#"; ****************************************************************"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 7 #"c-state"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"config"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"list?"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 6 #"config"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 23 3 1 #"("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 6 #"config"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 23 3 1 #"("
0 0 14 3 7 #"c-state"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 6 #"config"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 8 #"c-symbol"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"config"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"list?"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 6 #"config"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"null?"
0 0 23 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 6 #"config"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"            "
0 0 20 3 1 #"'"
0 0 14 3 1 #"b"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 6 #"config"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 23 3 1 #"("
0 0 14 3 8 #"c-symbol"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 6 #"config"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 7 #"halted?"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"machine"
0 0 23 3 1 #" "
0 0 14 3 6 #"config"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 3 #"not"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"i-lookup"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"c-s"
0 0 14 3 4 #"tate"
0 0 23 3 1 #" "
0 0 14 3 6 #"config"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"c-symbol"
0 0 23 3 1 #" "
0 0 14 3 6 #"config"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 7 #"machine"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 66
#"; ****************************************************************"
0 0 23 29 1 #"\n"
0 0 17 3 29 #"; ** problem 6 ** (20 points)"
0 0 23 29 1 #"\n"
0 0 17 3 20 #"; Write a procedure "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 27 #"; (next-config mach config)"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 34 #"; that takes a Turing machine mach"
0 0 23 29 1 #"\n"
0 0 17 3 39 #"; and a normalized configuration config"
0 0 23 29 1 #"\n"
0 0 17 3 50 #"; and returns the (normalized) next configuration "
0 0 23 29 1 #"\n"
0 0 17 3 58
#"; for the Turing machine mach in the configuration config."
0 0 23 29 1 #"\n"
0 0 17 3 58
#"; If there is no applicable instruction, the configuration"
0 0 23 29 1 #"\n"
0 0 17 3 50 #"; returned should be just the input configuration."
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 27 #"; Hint: get your procedures"
0 0 23 29 1 #"\n"
0 0 17 3 68
#"; halted?, i-lookup, write-symbol, shift-head-left, shift-head-right"
0 0 23 29 1 #"\n"
0 0 17 3 41 #"; working and combine them appropriately."
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 11 #"; Examples:"
0 0 23 29 1 #"\n"
0 0 17 3 49 #"; (next-config tm1 '((q1) 0 0 1)) => (1 (q1) 0 1)"
0 0 23 29 1 #"\n"
0 0 17 3 49 #"; (next-config tm1 '(1 (q1) 0 1)) => (1 1 (q1) 1)"
0 0 23 29 1 #"\n"
0 0 17 3 49 #"; (next-config tm1 '(1 1 0 (q1))) => (1 1 (q2) 0)"
0 0 23 29 1 #"\n"
0 0 17 3 51 #"; (next-config tm1 '((q2) b 1 1 0)) => ((q3) 1 1 0)"
0 0 23 29 1 #"\n"
0 0 17 3 49 #"; (next-config tm1 '((q3) 1 1 0)) => ((q3) 1 1 0)"
0 0 23 29 1 #"\n"
0 0 17 3 66
#"; ****************************************************************"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 56 #"; Determine current state and symbol (c-state, c-symbol)"
0 0 23 29 1 #"\n"
0 0 17 3 45 #"; Look up the relevant instruction (i-lookup)"
0 0 23 29 1 #"\n"
0 0 17 3 48 #"; Apply it. (write-symbol, change-state, shift-h"
0 0 17 3 4 #"ead)"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 11 #"next-config"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"machine"
0 0 23 3 1 #" "
0 0 14 3 6 #"config"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"halted?"
0 0 23 3 1 #" "
0 0 14 3 7 #"machine"
0 0 23 3 1 #" "
0 0 14 3 6 #"config"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 14 3 6 #"config"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 23 3 1 #"("
0 0 15 3 3 #"let"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 14 3 11 #"instruction"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"i-lookup"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"c-state"
0 0 23 3 1 #" "
0 0 14 3 6 #"config"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"c-symbol"
0 0 23 3 1 #" "
0 0 14 3 6 #"config"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 14 3 7 #"machine"
0 0 23 3 1 #")"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 23 3 2 #" ("
0 0 14 3 11 #"i-direction"
0 0 23 3 1 #" "
0 0 14 3 11 #"instruction"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 9 #"normalize"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 15 #"shift-head-left"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 12 #"change-state"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"i-new-state"
0 0 23 3 1 #" "
0 0 14 3 11 #"instruction"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 29 #"                            ("
0 0 14 3 12 #"write-symbol"
0 0 23 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 12 #"i-new-symbol"
0 0 23 3 1 #" "
0 0 14 3 11 #"instruction"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 42 #"                                          "
0 0 14 3 6 #"config"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"            "
0 0 23 3 1 #"("
0 0 14 3 9 #"normalize"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 13 #"             "
0 0 23 3 1 #"("
0 0 14 3 16 #"shift-head-right"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 12 #"change-state"
0 0 23 3 2 #" ("
0 0 14 3 11 #"i-new-state"
0 0 23 3 1 #" "
0 0 14 3 11 #"instruction"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                            "
0 0 23 3 1 #"("
0 0 14 3 12 #"write-symbol"
0 0 23 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 12 #"i-new-symbol"
0 0 23 3 1 #" "
0 0 14 3 11 #"instruction"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 30 #"                              "
0 0 14 3 6 #"config"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 3 3 #")))"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 66
#"; ****************************************************************"
0 0 23 29 1 #"\n"
0 0 17 3 49 #"; If your procedures are working, then you should"
0 0 23 29 1 #"\n"
0 0 17 3 45 #"; be able to run the following example, which"
0 0 23 29 1 #"\n"
0 0 17 3 49 #"; shows the successive normalized configurations "
0 0 23 29 1 #"\n"
0 0 17 3 62
#"; of Turing machine tm1 when run from the given configuration."
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 40 #";; > (simulate tm1 '((q1) 1 1 0 1 0) 20)"
0 0 23 29 1 #"\n"
0 0 17 3 20 #";; (((q1) 1 1 0 1 0)"
0 0 23 29 1 #"\n"
0 0 17 3 20 #";;  (0 (q1) 1 0 1 0)"
0 0 23 29 1 #"\n"
0 0 17 3 20 #";;  (0 0 (q1) 0 1 0)"
0 0 23 29 1 #"\n"
0 0 17 3 20 #";;  (0 0 1 (q1) 1 0)"
0 0 23 29 1 #"\n"
0 0 17 3 20 #";;  (0 0 1 0 (q1) 0)"
0 0 23 29 1 #"\n"
0 0 17 3 20 #";;  (0 0 1 0 1 (q1))"
0 0 23 29 1 #"\n"
0 0 17 3 20 #";;  (0 0 1 0 (q2) 1)"
0 0 23 29 1 #"\n"
0 0 17 3 20 #";;  (0 0 1 (q2) 0 1)"
0 0 23 29 1 #"\n"
0 0 17 3 20 #";;  (0 0 (q2) 1 0 1)"
0 0 23 29 1 #"\n"
0 0 17 3 20 #";;  (0 (q2) 0 1 0 1)"
0 0 23 29 1 #"\n"
0 0 17 3 20 #";;  ((q2) 0 0 1 0 1)"
0 0 23 29 1 #"\n"
0 0 17 3 22 #";;  ((q2) b 0 0 1 0 1)"
0 0 23 29 1 #"\n"
0 0 17 3 21 #";;  ((q3) 0 0 1 0 1))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 66
#"; ****************************************************************"
0 0 23 29 1 #"\n"
0 0 17 3 29 #"; ** problem 7 ** (15 points)"
0 0 23 29 1 #"\n"
0 0 17 3 45 #"; Define (in the given Scheme representation)"
0 0 23 29 1 #"\n"
0 0 17 3 24 #"; a Turing machine named"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 10 #"; tm-times"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 51 #"; that takes as input two positive integers m and n"
0 0 23 29 1 #"\n"
0 0 17 3 48 #"; in unary and produces as output the product of"
0 0 23 29 1 #"\n"
0 0 17 3 19 #"; m and n in unary."
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 60
#"; A number n is represented in unary by a sequence of n 1's."
0 0 23 29 1 #"\n"
0 0 17 3 52 #"; The numbers m and n are separated by the symbol c."
0 0 23 29 1 #"\n"
0 0 17 3 37 #"; The output of the machine should be"
0 0 23 29 1 #"\n"
0 0 17 3 52 #"; a sequence of 1's representing the desired result."
0 0 23 29 1 #"\n"
0 0 17 3 47 #"; The read/write head should be on the leftmost"
0 0 23 29 1 #"\n"
0 0 17 3 31 #"; nonblank symbol of the output"
0 0 23 29 1 #"\n"
0 0 17 3 40 #"; and all other squares should be blank."
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 40 #"; You *may* use additional tape symbols."
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 37 #"; IMPORTANT: Include a clear overview"
0 0 23 29 1 #"\n"
0 0 17 3 47 #"; description of how your Turing machine works."
0 0 23 29 1 #"\n"
0 0 17 3 37 #"; Give and justify a good estimate of"
0 0 23 29 1 #"\n"
0 0 17 3 43 #"; number of steps your machine will take on"
0 0 23 29 1 #"\n"
0 0 17 3 28 #"; inputs of lengths m and n."
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 55 #"; NOTE: you can still do this problem if your simulator"
0 0 23 29 1 #"\n"
0 0 17 3 57 #"; is not working, assuming you understand Turing machines"
0 0 23 29 1 #"\n"
0 0 17 3 52 #"; and the Scheme representation of them given above."
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 10 #"; Examples"
0 0 23 29 1 #"\n"
0 0 17 3 26 #"; input          => output"
0 0 23 29 1 #"\n"
0 0 17 3 21 #"; 1c1            => 1"
0 0 23 29 1 #"\n"
0 0 17 3 22 #"; 11c1           => 11"
0 0 23 29 1 #"\n"
0 0 17 3 26 #"; 11c111         => 111111"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 34 #"; Here are input configurations if"
0 0 23 29 1 #"\n"
0 0 17 3 39 #"; you want to simulate your tm-times on"
0 0 23 29 1 #"\n"
0 0 17 3 15 #"; these inputs."
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 8 #"times1c1"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 14 3 2 #"q1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 8 #"times2c1"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 14 3 2 #"q1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 8 #"times2c3"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 23 3 1 #"("
0 0 14 3 2 #"q1"
0 0 23 3 1 #")"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 66
#"; ****************************************************************"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 8 #"tm-times"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"q1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 2 #"q1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"q1"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 14 3 2 #"q2"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 1 #")"
0 0 23 3 2 #"  "
0 0 17 3 10 #"; Go to c."
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"q2"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 2 #"q2"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"q2"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 14 3 2 #"q3"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 23 3 2 #"  "
0 0 17 3 20 #"; Change 1's to x's."
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"q3"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 2 #"q3"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"q3"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 14 3 2 #"q3"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"q3"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 2 #"q3"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 23 3 2 #"  "
0 0 17 3 28 #"; Go all the way to the left"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"q3"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 14 3 2 #"q4"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"q4"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 2 #"q5"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 1 #")"
0 0 23 3 2 #"  "
0 0 17 3 37 #"; Delete the 1 on the end of the row."
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"q4"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 14 3 3 #"q10"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"q5"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 2 #"q5"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"q5"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 14 3 2 #"q5"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 1 #")"
0 0 23 3 2 #"  "
0 0 17 3 37 #"; Find c and change the next x to a y"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"q5"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 2 #"q5"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"q6"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 2 #"q6"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"q6"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 2 #"q6"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 1 #")"
0 0 23 3 2 #"  "
0 0 17 3 30 #"; Go to end of string, add a 1"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"q6"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 14 3 2 #"q7"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"q7"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 2 #"q7"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"q7"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 2 #"q7"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 23 3 2 #"  "
0 0 17 3 18 #"; Go left to the y"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"q7"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 14 3 2 #"q8"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"q8"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 2 #"q6"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 1 #")"
0 0 23 3 2 #"  "
0 0 17 3 45 #"; If the next sym is x, change to 9, go to q6"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"q8"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 2 #"q9"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 23 3 2 #"  "
0 0 17 3 32 #"; If the next sym is 1, go to q9"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"q9"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 14 3 2 #"q9"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 2 #"q9"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 14 3 2 #"q3"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 23 3 2 #"  "
0 0 17 3 17 #"; Clean up y's an"
0 0 17 3 10 #"d go to q3"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 20 3 1 #"'"
0 0 23 3 1 #"("
0 0 14 3 3 #"q10"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 3 #"q10"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #")"
0 0 23 3 2 #"  "
0 0 17 3 15 #"; Clean up x's."
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  )"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 66
#"; ****************************************************************"
0 0 23 29 1 #"\n"
0 0 17 3 66
#"; *************** end of hw3.scm *********************************"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0           0
